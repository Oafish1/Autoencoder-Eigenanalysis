""" Read binary files generated by arbitrary dns codes. """
import numpy as np

class BinaryReader(object):
    """ Reader for binary files with fixed record length. 
    Attributes:
        data: dictionary with keys=user defined data labels,
            vals=binary data blocks.
    """
    def __init__(self):
        self.data = {}

    def load_data(self, data_labels, input_file_name, n_data=1, prec=8, data_type='float'):
        """ Read in binary data with fixed record length from file.
        Args:
            data_labels: list/value for labelling self.data. Length must = total number 
            of records
            input_file_name: string for file location
            n_data: integer/list of ints of number of data points per record. 
            Length must match that of data_labels. 
            prec: integer precision single=4, double=8 
            data_type: string data type 
        """
        if type(data_labels) is not list: data_labels = [data_labels]
        if type(n_data) is not list: n_data = [n_data]

        binary_file = open(input_file_name, 'rb')
        data_type = data_type + '%d' %(prec*8)
        n_records = 0
        block_sum = 0
        for (n_block, label) in zip(n_data, data_labels):
            binary_file.seek(prec * block_sum)
            dataset = np.fromfile(binary_file, dtype=data_type, count=n_block)
            block_sum += n_block
            self.data[label] = dataset 
        binary_file.close()

    def delete_all(self):
        for lab in list(self.data):
            self._delete_data(lab)

    def _delete_data(self, data_label):
        del self.data[data_label]

    def replace_data(self, data_label, new_data, n_data):
        self._delete_data(data_label)
        self.data[data_label] = new_data

    def reshape_data(self, data_label, shape=(-1,)):
        self.data[data_label].reshape_data(shape)
